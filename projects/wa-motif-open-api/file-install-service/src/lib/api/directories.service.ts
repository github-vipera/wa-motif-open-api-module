/**
 * Motif File Install Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorVipera } from '../model/errorVipera';
import { OsgiBundle } from '../model/osgiBundle';
import { OsgiBundleDirectory } from '../model/osgiBundleDirectory';

import { WC_API_BASE_PATH } from 'web-console-core';
import { Configuration }                                     from '../configuration';
import { DirectoriesServiceInterface }                            from './directories.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class DirectoriesService implements DirectoriesServiceInterface {

    protected basePath = 'http://localhost:8080/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(WC_API_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Deletes Bundle Plugin jar contained into directory
     * Deletes Bundle Plugin jar contained into directory
     * @param directory Directory relative path
     * @param bundle Bundle File Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBundle(directory: string, bundle: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBundle(directory: string, bundle: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBundle(directory: string, bundle: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBundle(directory: string, bundle: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (directory === null || directory === undefined) {
            throw new Error('Required parameter directory was null or undefined when calling deleteBundle.');
        }
        if (bundle === null || bundle === undefined) {
            throw new Error('Required parameter bundle was null or undefined when calling deleteBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/fileinstall/directories/${encodeURIComponent(String(directory))}/bundles/${encodeURIComponent(String(bundle))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes Bundle Plugin jars included into directory
     * Deletes Bundle Plugin jars included into directory
     * @param directory Directory relative path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBundles(directory: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBundles(directory: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBundles(directory: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBundles(directory: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (directory === null || directory === undefined) {
            throw new Error('Required parameter directory was null or undefined when calling deleteBundles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/fileinstall/directories/${encodeURIComponent(String(directory))}/bundles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists the OSGi bundles in a directory
     * Lists the OSGi bundles in a directory
     * @param directory Directory relative path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBundles(directory: string, observe?: 'body', reportProgress?: boolean): Observable<Array<OsgiBundle>>;
    public listBundles(directory: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OsgiBundle>>>;
    public listBundles(directory: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OsgiBundle>>>;
    public listBundles(directory: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (directory === null || directory === undefined) {
            throw new Error('Required parameter directory was null or undefined when calling listBundles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OsgiBundle>>(`${this.configuration.basePath}/fileinstall/directories/${encodeURIComponent(String(directory))}/bundles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists the OSGi bundle directories
     * Lists the OSGi bundle directories
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDirectories(observe?: 'body', reportProgress?: boolean): Observable<Array<OsgiBundleDirectory>>;
    public listDirectories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OsgiBundleDirectory>>>;
    public listDirectories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OsgiBundleDirectory>>>;
    public listDirectories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OsgiBundleDirectory>>(`${this.configuration.basePath}/fileinstall/directories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Scans a directory and installs/updates/deletes bundles
     * Scans a directory and installs/updates/deletes bundles
     * @param directory Directory relative path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scanDirectory(directory: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public scanDirectory(directory: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public scanDirectory(directory: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public scanDirectory(directory: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (directory === null || directory === undefined) {
            throw new Error('Required parameter directory was null or undefined when calling scanDirectory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/fileinstall/directories/${encodeURIComponent(String(directory))}/scan`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
