/**
 * Motif File Install Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorVipera } from '../model/errorVipera';

import { WC_API_BASE_PATH } from 'web-console-core'
import { Configuration }                                     from '../configuration';
import { BundlesServiceInterface }                            from './bundles.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class BundlesService implements BundlesServiceInterface {

    protected basePath = 'http://localhost/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(WC_API_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Uploads a Bundle Plugin jar
     * Uploads a Bundle Plugin jar
     * @param file Plugin jar file
     * @param directory Destination dir where install plugin
     * @param deleteOtherVersions Delete other plugin versions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadBundle(file: Blob, directory: string, deleteOtherVersions?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadBundle(file: Blob, directory: string, deleteOtherVersions?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadBundle(file: Blob, directory: string, deleteOtherVersions?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadBundle(file: Blob, directory: string, deleteOtherVersions?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadBundle.');
        }
        if (directory === null || directory === undefined) {
            throw new Error('Required parameter directory was null or undefined when calling uploadBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }
        if (directory !== undefined) {
            formParams = formParams.append('directory', <any>directory) || formParams;
        }
        if (deleteOtherVersions !== undefined) {
            formParams = formParams.append('deleteOtherVersions', <any>deleteOtherVersions) || formParams;
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/fileinstall/bundles`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
