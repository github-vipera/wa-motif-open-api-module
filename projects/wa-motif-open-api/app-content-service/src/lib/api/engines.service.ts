/**
 * Motif App Content Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AppCheckRequest } from '../model/appCheckRequest';
import { AppCheckResponse } from '../model/appCheckResponse';
import { ApplicationVersionList } from '../model/applicationVersionList';
import { Engine } from '../model/engine';
import { EngineEntity } from '../model/engineEntity';
import { EngineEntityList } from '../model/engineEntityList';

import { WC_API_BASE_PATH } from 'web-console-core'

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EnginesService {

    protected basePath = 'http://localhost:8080/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(WC_API_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Dynamic engine version check
     * Dynamic engine version check
     * @param domain Domain Name
     * @param engine Engine Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkEngine(domain: string, engine: string, body?: AppCheckRequest, observe?: 'body', reportProgress?: boolean): Observable<AppCheckResponse>;
    public checkEngine(domain: string, engine: string, body?: AppCheckRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AppCheckResponse>>;
    public checkEngine(domain: string, engine: string, body?: AppCheckRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AppCheckResponse>>;
    public checkEngine(domain: string, engine: string, body?: AppCheckRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling checkEngine.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling checkEngine.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}/check`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Registers a new dynamic engine configuration
     * Registers a new dynamic engine configuration
     * @param domain Domain Name
     * @param engine Engine Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEngine(domain: string, engine: string, body?: Engine, observe?: 'body', reportProgress?: boolean): Observable<EngineEntity>;
    public createEngine(domain: string, engine: string, body?: Engine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EngineEntity>>;
    public createEngine(domain: string, engine: string, body?: Engine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EngineEntity>>;
    public createEngine(domain: string, engine: string, body?: Engine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling createEngine.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling createEngine.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a dynamic engine configuration
     * Deletes a dynamic engine configuration
     * @param domain Domain Name
     * @param engine Engine Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEngine(domain: string, engine: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEngine(domain: string, engine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEngine(domain: string, engine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEngine(domain: string, engine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteEngine.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling deleteEngine.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes all tracked engines versions
     * Deletes all tracked engines versions
     * @param domain Domain Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTrackedEnginesVersions(domain: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTrackedEnginesVersions(domain: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTrackedEnginesVersions(domain: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTrackedEnginesVersions(domain: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteTrackedEnginesVersions.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/tracking/versions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Looks up a dynamic engine configuration
     * Looks up a dynamic engine configuration
     * @param domain Domain Name
     * @param engine Engine Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEngine(domain: string, engine: string, observe?: 'body', reportProgress?: boolean): Observable<EngineEntity>;
    public getEngine(domain: string, engine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EngineEntity>>;
    public getEngine(domain: string, engine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EngineEntity>>;
    public getEngine(domain: string, engine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getEngine.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling getEngine.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Looks up all dynamic engine configurations for a given domain
     * Looks up all dynamic engine configurations for a given domain
     * @param domain Domain Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEngines(domain: string, observe?: 'body', reportProgress?: boolean): Observable<EngineEntityList>;
    public getEngines(domain: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EngineEntityList>>;
    public getEngines(domain: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EngineEntityList>>;
    public getEngines(domain: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getEngines.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve tracked engine versions
     * Retrieve tracked engine versions
     * @param domain Domain Name
     * @param engine Engine Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrackedEngineVersions(domain: string, engine: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getTrackedEngineVersions(domain: string, engine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getTrackedEngineVersions(domain: string, engine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getTrackedEngineVersions(domain: string, engine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getTrackedEngineVersions.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling getTrackedEngineVersions.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}/tracking/versions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists all tracked engines versions
     * Lists all tracked engines versions
     * @param domain Domain Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrackedEnginesVersions(domain: string, observe?: 'body', reportProgress?: boolean): Observable<ApplicationVersionList>;
    public getTrackedEnginesVersions(domain: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationVersionList>>;
    public getTrackedEnginesVersions(domain: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationVersionList>>;
    public getTrackedEnginesVersions(domain: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getTrackedEnginesVersions.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/tracking/versions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a registered dynamic engine configuration
     * Updates a registered dynamic engine configuration
     * @param domain Domain Name
     * @param engine Engine Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEngine(domain: string, engine: string, body?: Engine, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEngine(domain: string, engine: string, body?: Engine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEngine(domain: string, engine: string, body?: Engine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEngine(domain: string, engine: string, body?: Engine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling updateEngine.');
        }
        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling updateEngine.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put(`${this.basePath}/appcont/domains/${encodeURIComponent(String(domain))}/engines/${encodeURIComponent(String(engine))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}