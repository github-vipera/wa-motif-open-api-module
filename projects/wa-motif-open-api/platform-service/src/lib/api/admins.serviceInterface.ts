/**
 * Motif Platform Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdminUser } from '../model/adminUser';
import { AdminUserCreate } from '../model/adminUserCreate';
import { AdminUserUpdate } from '../model/adminUserUpdate';
import { CredentialsCreate } from '../model/credentialsCreate';
import { CredentialsUpdate } from '../model/credentialsUpdate';
import { ErrorVipera } from '../model/errorVipera';


import { Configuration }                                     from '../configuration';


export interface AdminsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Creates an admin user
    * Creates an admin user
    * @param domain Domain Name
    * @param adminUserCreate 
    */
    createAdminUser(domain: string, adminUserCreate?: AdminUserCreate, extraHttpRequestParams?: any): Observable<AdminUser>;

    /**
    * Creates admin user credentials
    * Creates admin user credentials
    * @param domain Domain Name
    * @param userId User Id
    * @param credentialsCreate 
    */
    createAdminUserCredentials(domain: string, userId: string, credentialsCreate?: CredentialsCreate, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Deletes an admin user
    * Deletes an admin user
    * @param domain Domain Name
    * @param userId User Id
    */
    deleteAdminUser(domain: string, userId: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Retrieves admin user
    * Retrieves admin user
    * @param domain Domain Name
    * @param userId User Id
    */
    getAdminUser(domain: string, userId: string, extraHttpRequestParams?: any): Observable<AdminUser>;

    /**
    * Retrieves admin users list
    * Retrieves admin users list
    * @param domain Domain Name
    */
    getAdminUsersList(domain: string, extraHttpRequestParams?: any): Observable<Array<AdminUser>>;

    /**
    * Updates an admin user
    * Updates an admin user
    * @param domain Domain Name
    * @param userId User Id
    * @param adminUserUpdate 
    */
    updateAdminUser(domain: string, userId: string, adminUserUpdate?: AdminUserUpdate, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Updates admin user credentials
    * Updates admin user credentials
    * @param domain Domain Name
    * @param userId User Id
    * @param credentialsUpdate 
    */
    updateAdminUserCredentials(domain: string, userId: string, credentialsUpdate?: CredentialsUpdate, extraHttpRequestParams?: any): Observable<any>;

}
