/**
 * Motif Platform Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CredentialsCreate } from '../model/credentialsCreate';
import { CredentialsUpdate } from '../model/credentialsUpdate';
import { ErrorVipera } from '../model/errorVipera';
import { User } from '../model/user';
import { UserCreate } from '../model/userCreate';
import { UserUpdate } from '../model/userUpdate';
import { UsersCount } from '../model/usersCount';


import { Configuration }                                     from '../configuration';


export interface UsersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Creates an user
    * Creates an user
    * @param domain Domain Name
    * @param userCreate 
    */
    createUser(domain: string, userCreate?: UserCreate, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Creates user credentials
    * Creates user credentials
    * @param domain Domain Name
    * @param userId User Id
    * @param credentialsCreate 
    */
    createUserCredentials(domain: string, userId: string, credentialsCreate?: CredentialsCreate, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Deletes an user
    * Deletes an user
    * @param domain Domain Name
    * @param userId User Id
    */
    deleteUser(domain: string, userId: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Retrieves user
    * Retrieves user
    * @param domain Domain Name
    * @param userId User Id
    */
    getUser(domain: string, userId: string, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Counts users in specified state
    * Counts users in specified state
    * @param domain Domain Name
    * @param state User State
    */
    getUsersCount(domain: string, state: string, extraHttpRequestParams?: any): Observable<UsersCount>;

    /**
    * Retrieves users list
    * Retrieves users list
    * @param domain Domain Name
    * @param userId UserId
    * @param userIdInt Internal UserId
    * @param state 
    * @param page Page (omit to retrieve all records at once)
    * @param pageSize Page size
    * @param sort Sorting fields
    */
    getUsersList(domain: string, userId?: string, userIdInt?: string, state?: string, page?: number, pageSize?: number, sort?: string, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Updates an user
    * Updates an user
    * @param domain Domain Name
    * @param userId User Id
    * @param userUpdate 
    */
    updateUser(domain: string, userId: string, userUpdate?: UserUpdate, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Updates user credentials
    * Updates user credentials
    * @param domain Domain Name
    * @param userId User Id
    * @param credentialsUpdate 
    */
    updateUserCredentials(domain: string, userId: string, credentialsUpdate?: CredentialsUpdate, extraHttpRequestParams?: any): Observable<any>;

}
