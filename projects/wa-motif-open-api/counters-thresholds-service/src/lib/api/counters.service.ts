/**
 * Motif Counters and Thresholds Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CounterInfo } from '../model/counterInfo';
import { CounterInfoEntity } from '../model/counterInfoEntity';
import { CounterInfoUpdatableFields } from '../model/counterInfoUpdatableFields';
import { ErrorVipera } from '../model/errorVipera';
import { ThresholdInfoEntity } from '../model/thresholdInfoEntity';

import { WC_API_BASE_PATH } from 'web-console-core';
import { Configuration }                                     from '../configuration';
import { CountersServiceInterface }                            from './counters.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class CountersService implements CountersServiceInterface {

    protected basePath = 'http://localhost:8080/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(WC_API_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates Counter Info
     * Creates Counter Info
     * @param counterInfo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCounterInfo(counterInfo?: CounterInfo, observe?: 'body', reportProgress?: boolean): Observable<CounterInfoEntity>;
    public createCounterInfo(counterInfo?: CounterInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CounterInfoEntity>>;
    public createCounterInfo(counterInfo?: CounterInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CounterInfoEntity>>;
    public createCounterInfo(counterInfo?: CounterInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CounterInfoEntity>(`${this.configuration.basePath}/countersthresholds/counters/infos`,
            counterInfo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes Counter Info
     * Deletes Counter Info
     * @param counterInfo Counter Info name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCounterInfo(counterInfo: string, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public deleteCounterInfo(counterInfo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public deleteCounterInfo(counterInfo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public deleteCounterInfo(counterInfo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling deleteCounterInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<object>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disables Counter Info
     * Disables Counter Info
     * @param counterInfo Counter Info name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disableCounterInfo(counterInfo: string, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public disableCounterInfo(counterInfo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public disableCounterInfo(counterInfo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public disableCounterInfo(counterInfo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling disableCounterInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<object>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}/enable`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads XML counter info file
     * Downloads XML counter info file
     * @param counterNames Counter Info Names
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadXml(counterNames?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadXml(counterNames?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadXml(counterNames?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadXml(counterNames?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (counterNames) {
            queryParameters = queryParameters.set('counterNames', counterNames.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/zip',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.configuration.basePath}/countersthresholds/counters/infos/xml`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enables Counter Info
     * Enables Counter Info
     * @param counterInfo Counter Info name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enableCounterInfo(counterInfo: string, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public enableCounterInfo(counterInfo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public enableCounterInfo(counterInfo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public enableCounterInfo(counterInfo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling enableCounterInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<object>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}/enable`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Counter Info
     * Retrieves Counter Info
     * @param counterInfo Counter Info name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCounterInfo(counterInfo: string, observe?: 'body', reportProgress?: boolean): Observable<CounterInfoEntity>;
    public getCounterInfo(counterInfo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CounterInfoEntity>>;
    public getCounterInfo(counterInfo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CounterInfoEntity>>;
    public getCounterInfo(counterInfo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling getCounterInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CounterInfoEntity>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Counter Info List
     * Retrieves Counter Info List
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCounterInfoList(observe?: 'body', reportProgress?: boolean): Observable<Array<CounterInfoEntity>>;
    public getCounterInfoList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CounterInfoEntity>>>;
    public getCounterInfoList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CounterInfoEntity>>>;
    public getCounterInfoList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CounterInfoEntity>>(`${this.configuration.basePath}/countersthresholds/counters/infos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Threshold Info List
     * Retrieves Threshold Info List
     * @param counterInfo Counter Info name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getThresholdInfoList(counterInfo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ThresholdInfoEntity>>;
    public getThresholdInfoList(counterInfo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ThresholdInfoEntity>>>;
    public getThresholdInfoList(counterInfo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ThresholdInfoEntity>>>;
    public getThresholdInfoList(counterInfo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling getThresholdInfoList.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ThresholdInfoEntity>>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}/thresholds`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates Counter Info
     * Updates Counter Info
     * @param counterInfo Counter Info name
     * @param counterInfoUpdatableFields 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCounterInfo(counterInfo: string, counterInfoUpdatableFields?: CounterInfoUpdatableFields, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public updateCounterInfo(counterInfo: string, counterInfoUpdatableFields?: CounterInfoUpdatableFields, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public updateCounterInfo(counterInfo: string, counterInfoUpdatableFields?: CounterInfoUpdatableFields, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public updateCounterInfo(counterInfo: string, counterInfoUpdatableFields?: CounterInfoUpdatableFields, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (counterInfo === null || counterInfo === undefined) {
            throw new Error('Required parameter counterInfo was null or undefined when calling updateCounterInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<object>(`${this.configuration.basePath}/countersthresholds/counters/infos/${encodeURIComponent(String(counterInfo))}`,
            counterInfoUpdatableFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads XML counter info file
     * Uploads XML counter info file
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadXml(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public uploadXml(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public uploadXml(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public uploadXml(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadXml.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) as any || formParams;
        }

        return this.httpClient.put<object>(`${this.configuration.basePath}/countersthresholds/counters/infos/xml`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
