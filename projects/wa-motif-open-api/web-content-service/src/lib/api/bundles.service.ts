/**
 * Motif Web Content Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Bundle } from '../model/bundle';
import { BundleStatus } from '../model/bundleStatus';
import { BundleUpdate } from '../model/bundleUpdate';
import { ErrorVipera } from '../model/errorVipera';

import { WC_API_BASE_PATH } from 'web-console-core';
import { Configuration }                                     from '../configuration';
import { BundlesServiceInterface }                            from './bundles.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class BundlesService implements BundlesServiceInterface {

    protected basePath = 'http://localhost:8080/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(WC_API_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete a Web Content Bundle
     * Delete a Web Content Bundle
     * @param bundleName 
     * @param bundleVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBundle(bundleName: string, bundleVersion: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBundle(bundleName: string, bundleVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBundle(bundleName: string, bundleVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBundle(bundleName: string, bundleVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling deleteBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling deleteBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads a Web Content Bundle
     * Downloads a Web Content Bundle
     * @param bundleName 
     * @param bundleVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadBundle(bundleName: string, bundleVersion: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadBundle(bundleName: string, bundleVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadBundle(bundleName: string, bundleVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadBundle(bundleName: string, bundleVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling downloadBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling downloadBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/zip',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a Web Content Bundle Info
     * Retrieves a Web Content Bundle Info
     * @param bundleName 
     * @param bundleVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBundle(bundleName: string, bundleVersion: string, observe?: 'body', reportProgress?: boolean): Observable<BundleStatus>;
    public getBundle(bundleName: string, bundleVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleStatus>>;
    public getBundle(bundleName: string, bundleVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleStatus>>;
    public getBundle(bundleName: string, bundleVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling getBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling getBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BundleStatus>(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Web Content Bundles Info
     * Retrieves Web Content Bundles Info
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBundlesList(observe?: 'body', reportProgress?: boolean): Observable<Array<Bundle>>;
    public getBundlesList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Bundle>>>;
    public getBundlesList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Bundle>>>;
    public getBundlesList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Bundle>>(`${this.configuration.basePath}/webcontent/bundles/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Publish a Web Content Bundle
     * Publish a Web Content Bundle
     * @param bundleName 
     * @param bundleVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publishBundle(bundleName: string, bundleVersion: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public publishBundle(bundleName: string, bundleVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public publishBundle(bundleName: string, bundleVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public publishBundle(bundleName: string, bundleVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling publishBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling publishBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}/publish`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unpublish a Web Content Bundle
     * Unpublish a Web Content Bundle
     * @param bundleName 
     * @param bundleVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unpublishBundle(bundleName: string, bundleVersion: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unpublishBundle(bundleName: string, bundleVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unpublishBundle(bundleName: string, bundleVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unpublishBundle(bundleName: string, bundleVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling unpublishBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling unpublishBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}/unpublish`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Web Content Bundle
     * Update a Web Content Bundle
     * @param bundleName 
     * @param bundleVersion 
     * @param bundleUpdate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBundle(bundleName: string, bundleVersion: string, bundleUpdate?: BundleUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateBundle(bundleName: string, bundleVersion: string, bundleUpdate?: BundleUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateBundle(bundleName: string, bundleVersion: string, bundleUpdate?: BundleUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateBundle(bundleName: string, bundleVersion: string, bundleUpdate?: BundleUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundleName === null || bundleName === undefined) {
            throw new Error('Required parameter bundleName was null or undefined when calling updateBundle.');
        }
        if (bundleVersion === null || bundleVersion === undefined) {
            throw new Error('Required parameter bundleVersion was null or undefined when calling updateBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/webcontent/bundles/${encodeURIComponent(String(bundleName))}/versions/${encodeURIComponent(String(bundleVersion))}`,
            bundleUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads a Web Content Bundle
     * Uploads a Web Content Bundle
     * @param bundle 
     * @param overwrite 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadBundle(bundle: Blob, overwrite?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadBundle(bundle: Blob, overwrite?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadBundle(bundle: Blob, overwrite?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadBundle(bundle: Blob, overwrite?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bundle === null || bundle === undefined) {
            throw new Error('Required parameter bundle was null or undefined when calling uploadBundle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (bundle !== undefined) {
            formParams = formParams.append('bundle', <any>bundle) || formParams;
        }
        if (overwrite !== undefined) {
            formParams = formParams.append('overwrite', <any>overwrite) || formParams;
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/webcontent/bundles`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
