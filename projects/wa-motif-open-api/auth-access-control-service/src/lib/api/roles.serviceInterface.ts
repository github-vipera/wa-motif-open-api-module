/**
 * Motif Auth Access Control Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Action } from '../model/action';
import { ActionAssign } from '../model/actionAssign';
import { EntitlementResult } from '../model/entitlementResult';
import { ErrorVipera } from '../model/errorVipera';
import { Group } from '../model/group';
import { Permission } from '../model/permission';
import { Role } from '../model/role';
import { RoleCreate } from '../model/roleCreate';
import { RoleUpdate } from '../model/roleUpdate';
import { User } from '../model/user';


import { Configuration }                                     from '../configuration';


export interface RolesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Assigns an action to the role
    * Assigns an action to the role
    * @param role Role Name
    * @param actionAssign 
    */
    assignActionToRole(role: string, actionAssign?: ActionAssign, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Creates a role
    * Creates a role
    * @param roleCreate 
    */
    createRole(roleCreate?: RoleCreate, extraHttpRequestParams?: any): Observable<Role>;

    /**
    * Deletes a role
    * Deletes a role
    * @param role Role Name
    */
    deleteRole(role: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Retrieves a role
    * Retrieves a role
    * @param role Role Name
    */
    getRole(role: string, extraHttpRequestParams?: any): Observable<Role>;

    /**
    * Retrieves the actions with the role
    * Retrieves the actions with the role
    * @param role Role Name
    */
    getRoleActions(role: string, extraHttpRequestParams?: any): Observable<Array<Action>>;

    /**
    * Retrieves the groups with the role
    * Retrieves the groups with the role
    * @param role Role Name
    */
    getRoleGroups(role: string, extraHttpRequestParams?: any): Observable<Array<Group>>;

    /**
    * Retrieves the permissions with the role
    * Retrieves the permissions with the role
    * @param role Role Name
    */
    getRolePermissions(role: string, extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Retrieves the users with the role
    * Retrieves the users with the role
    * @param role Role Name
    * @param userId UserId
    * @param userIdInt Internal UserId
    * @param page Page (omit to retrieve all records at once)
    * @param pageSize Page size
    * @param sort Sorting fields
    */
    getRoleUsers(role: string, userId?: string, userIdInt?: string, page?: number, pageSize?: number, sort?: string, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Retrieves all roles
    * Retrieves all roles
    */
    getRoles(extraHttpRequestParams?: any): Observable<Array<Role>>;

    /**
    * Check if role is entitled to execute the action
    * Check if role is entitled to execute the action
    * @param role Role Name
    * @param action Action Name
    */
    isRoleActionEntitled(role: string, action: string, extraHttpRequestParams?: any): Observable<EntitlementResult>;

    /**
    * Check if permission is assigned to the role
    * Check if permission is assigned to the role
    * @param role Role Name
    * @param permissionComponent Component Name
    * @param permissionAction Action (can be VIEW, EXECUTE, MODIFY or *)
    * @param permissionTarget Method name or *(wildcard)
    */
    isRolePermissionEntitled(role: string, permissionComponent: string, permissionAction: string, permissionTarget: string, extraHttpRequestParams?: any): Observable<EntitlementResult>;

    /**
    * Removes an action from the role
    * Removes an action from the role
    * @param role Role Name
    * @param action Action Name
    */
    removeActionFromRole(role: string, action: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Updates a role description
    * Updates a role description
    * @param role Role Name
    * @param roleUpdate 
    */
    updateRole(role: string, roleUpdate?: RoleUpdate, extraHttpRequestParams?: any): Observable<any>;

}
