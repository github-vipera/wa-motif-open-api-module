/**
 * Motif Auth Access Control Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Action } from '../model/action';
import { EntitlementResult } from '../model/entitlementResult';
import { ErrorVipera } from '../model/errorVipera';
import { Group } from '../model/group';
import { GroupAssign } from '../model/groupAssign';
import { Permission } from '../model/permission';
import { Role } from '../model/role';
import { RoleAssign } from '../model/roleAssign';


import { Configuration }                                     from '../configuration';


export interface UsersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Assigns group to user
    * Assigns group to user
    * @param domain Domain Name
    * @param userId User Id
    * @param groupAssign 
    */
    assignGroupToUser(domain: string, userId: string, groupAssign?: GroupAssign, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Assigns role to an user
    * Assigns role to an user
    * @param domain Domain Name
    * @param userId User Id
    * @param roleAssign 
    */
    assignRoleToUser(domain: string, userId: string, roleAssign?: RoleAssign, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Retrieves the actions with the given user
    * Retrieves the actions with the given user
    * @param domain Domain Name
    * @param userId User Id
    */
    getUserActions(domain: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Action>>;

    /**
    * Retrieves the groups with the given user
    * Retrieves the groups with the given user
    * @param domain Domain Name
    * @param userId User Id
    */
    getUserGroups(domain: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Group>>;

    /**
    * Retrieves the permissions with the given user
    * Retrieves the permissions with the given user
    * @param domain Domain Name
    * @param userId User Id
    */
    getUserPermissions(domain: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Retrieves the roles given a user
    * Retrieves the roles given a user
    * @param domain Domain Name
    * @param userId User Id
    */
    getUserRoles(domain: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Role>>;

    /**
    * Check if user is entitled to execute the action
    * Check if user is entitled to execute the action
    * @param domain Domain Name
    * @param userId User Id
    * @param action Action Name
    */
    isUserActionEntitled(domain: string, userId: string, action: string, extraHttpRequestParams?: any): Observable<EntitlementResult>;

    /**
    * Check if permission is assigned to the user
    * Check if permission is assigned to the user
    * @param domain Domain Name
    * @param userId User Id
    * @param permissionComponent Component Name
    * @param permissionAction Action (can be VIEW, EXECUTE, MODIFY or *)
    * @param permissionTarget Method name or *(wildcard)
    */
    isUserPermissionEntitled(domain: string, userId: string, permissionComponent: string, permissionAction: string, permissionTarget: string, extraHttpRequestParams?: any): Observable<EntitlementResult>;

    /**
    * Removes group from user
    * Removes group from user
    * @param domain Domain Name
    * @param userId User Id
    * @param group Group Name
    */
    removeGroupFromUser(domain: string, userId: string, group: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Removes a role from an user
    * Removes a role from an user
    * @param domain Domain Name
    * @param userId User Id
    * @param role Role Name
    */
    removeRoleFromUser(domain: string, userId: string, role: string, extraHttpRequestParams?: any): Observable<any>;

}
