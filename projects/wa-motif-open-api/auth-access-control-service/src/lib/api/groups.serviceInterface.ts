/**
 * Motif Auth Access Control Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Action } from '../model/action';
import { ErrorVipera } from '../model/errorVipera';
import { Group } from '../model/group';
import { GroupCreate } from '../model/groupCreate';
import { GroupUpdate } from '../model/groupUpdate';
import { Permission } from '../model/permission';
import { Role } from '../model/role';
import { RoleAssign } from '../model/roleAssign';
import { User } from '../model/user';


import { Configuration }                                     from '../configuration';


export interface GroupsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Assigns a role to a group
    * Assigns a role to a group
    * @param domain Domain Name
    * @param group Group Name
    * @param roleAssign 
    */
    assignRoleToGroup(domain: string, group: string, roleAssign?: RoleAssign, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Creates a group
    * Creates a group
    * @param domain Domain Name
    * @param groupCreate 
    */
    createGroup(domain: string, groupCreate?: GroupCreate, extraHttpRequestParams?: any): Observable<Group>;

    /**
    * Deletes a group
    * Deletes a group
    * @param domain Domain Name
    * @param group Group Name
    */
    deleteGroup(domain: string, group: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Retrieves the groups with the given domain
    * Retrieves the groups with the given domain
    * @param domain Domain Name
    */
    getDomainGroups(domain: string, extraHttpRequestParams?: any): Observable<Array<Group>>;

    /**
    * Retrieves a group
    * Retrieves a group
    * @param domain Domain Name
    * @param group Group Name
    */
    getGroup(domain: string, group: string, extraHttpRequestParams?: any): Observable<Group>;

    /**
    * Retrieves the actions given an group
    * Retrieves the actions given a group
    * @param domain Domain Name
    * @param group Group Name
    */
    getGroupActions(domain: string, group: string, extraHttpRequestParams?: any): Observable<Array<Action>>;

    /**
    * Retrieves the permissions given an group
    * Retrieves the permissions given a group
    * @param domain Domain Name
    * @param group Group Name
    */
    getGroupPermissions(domain: string, group: string, extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Retrieves the roles given an group
    * Retrieves the roles given a group
    * @param domain Domain Name
    * @param group Group Name
    */
    getGroupRoles(domain: string, group: string, extraHttpRequestParams?: any): Observable<Array<Role>>;

    /**
    * Retrieves group users
    * Retrieves group users
    * @param domain Domain Name
    * @param group Group Name
    * @param userId UserId
    * @param userIdInt Internal UserId
    * @param page Page (omit to retrieve all records at once)
    * @param pageSize Page size
    * @param sort Sorting fields
    */
    getGroupUsers(domain: string, group: string, userId?: string, userIdInt?: string, page?: number, pageSize?: number, sort?: string, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Retrieves all groups
    * Retrieves all groups
    */
    getGroups(extraHttpRequestParams?: any): Observable<Array<Group>>;

    /**
    * Removes role from a group
    * Removes role from a group
    * @param domain Domain Name
    * @param group Group Name
    * @param role Role Name
    */
    removeRoleFromGroup(domain: string, group: string, role: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Updates a group
    * Updates a group
    * @param domain Domain Name
    * @param group Group Name
    * @param groupUpdate 
    */
    updateGroup(domain: string, group: string, groupUpdate?: GroupUpdate, extraHttpRequestParams?: any): Observable<any>;

}
