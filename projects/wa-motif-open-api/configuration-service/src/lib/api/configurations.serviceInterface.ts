/**
 * Motif Configuration Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ErrorVipera } from '../model/errorVipera';
import { Tag } from '../model/tag';


import { Configuration }                                     from '../configuration';


export interface ConfigurationsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Deletes Configuration with specified tag
    * Deletes Configuration with specified tag
    * @param tag Filter param. Not mandatory
    */
    deleteTag(tag: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Downloads XML configuration file
    * Downloads XML configuration file
    */
    downloadXml(extraHttpRequestParams?: any): Observable<Blob>;

    /**
    * Downloads XML configuration file with tagged properties
    * Downloads XML configuration file with tagged properties
    * @param tag Filter param. Not mandatory
    */
    downloadXmlTaggedSettings(tag: string, extraHttpRequestParams?: any): Observable<Blob>;

    /**
    * Retrieves Available Tags
    * Retrieves Available Tags
    */
    getTags(extraHttpRequestParams?: any): Observable<Array<Tag>>;

    /**
    * Restores a version tag
    * Restores a version tag. All properties bearing the specified tag will become the active ones.
    * @param tag Filter param. Not mandatory
    */
    tagRestore(tag: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Applies a version tag to all properties identified by service
    * Applies a version tag to all properties identified by service
    * @param service 
    * @param tag Filter param. Not mandatory
    */
    tagService(service: string, tag: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Applies a version tag to single property
    * Applies a version tag to single property
    * @param service 
    * @param property 
    * @param tag Filter param. Not mandatory
    */
    tagSetting(service: string, property: string, tag: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Applies a version tag to all properties
    * Applies a version tag to all properties
    * @param tag 
    */
    tagSettings(tag?: Tag, extraHttpRequestParams?: any): Observable<any>;

    /**
    * Uploads XML configuration file
    * Uploads XML configuration file
    * @param file 
    * @param force 
    */
    uploadXml(file: Blob, force?: boolean, extraHttpRequestParams?: any): Observable<any>;

}
